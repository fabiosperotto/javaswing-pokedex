/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifsul.gui;

import br.com.ifsul.entidades.Pokemon;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fabiosperotto
 */
public class TelaGlossario extends javax.swing.JFrame {

    private ArrayList<Pokemon> lista;
    private File arquivoSelecionado = null;
    /**
     * Creates new form TelaGlossario
     */
    public TelaGlossario(ArrayList<Pokemon> lista) {
        this.lista = lista;
        initComponents();
        this.listarPokemons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbPokemons = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnExcluirGeral = new javax.swing.JButton();
        lbNome = new javax.swing.JLabel();
        tfNome = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        lbImagem = new javax.swing.JLabel();
        lbPreview = new javax.swing.JLabel();
        lbPrevisualizar = new javax.swing.JLabel();
        btnUploadImagem = new javax.swing.JButton();
        lbPreviewRotulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Glossário Pokémon");
        setResizable(false);

        tbPokemons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nome", "imagem"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbPokemons.setToolTipText("tabela contendo todos os cadastros");
        tbPokemons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPokemonsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbPokemons);

        btnEditar.setText("Editar");
        btnEditar.setToolTipText("Botão pra editar um registro selecionado");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluirGeral.setText("Excluir Geral");
        btnExcluirGeral.setToolTipText("Botão para excluir linha por linha os registros da tabela");
        btnExcluirGeral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirGeralActionPerformed(evt);
            }
        });

        lbNome.setLabelFor(tfNome);
        lbNome.setText("Nome:");
        lbNome.setToolTipText("rótulo Nome");

        tfNome.setToolTipText("Inserir nome para o pokemon");

        btnSalvar.setText("Salvar");
        btnSalvar.setToolTipText("Clique para iniciar a operação de salvar o cadastro");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir Selecionado");
        btnExcluir.setToolTipText("Botão que exclui um item selecionado");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        lbImagem.setToolTipText("Local de visualização da imagem do pokemon");

        lbPreview.setText("Visualizar");

        lbPrevisualizar.setToolTipText("local de pré-visualização da imagem do cadastro");

        btnUploadImagem.setText("Escolher Imagem");
        btnUploadImagem.setToolTipText("Escolher imagem para o pokemon");
        btnUploadImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImagemActionPerformed(evt);
            }
        });

        lbPreviewRotulo.setText("Pré-Visualizar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbImagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPreview)
                                .addGap(0, 22, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirGeral)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUploadImagem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSalvar)
                                .addGap(2, 2, 2))
                            .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPrevisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPreviewRotulo, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNome)
                    .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPreviewRotulo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUploadImagem)
                        .addComponent(btnSalvar))
                    .addComponent(lbPrevisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnExcluirGeral)
                    .addComponent(btnExcluir))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(lbPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int numeroLinha = this.tbPokemons.getSelectedRow();
        //object para string e depois pra int:
        int id = Integer.valueOf(this.tbPokemons.getValueAt(numeroLinha, 0).toString()); 
        String nome = (String) this.tbPokemons.getValueAt(numeroLinha, 1);
        String imagem = (String) this.tbPokemons.getValueAt(numeroLinha, 2);
        Pokemon pokemon = new Pokemon(id, nome, imagem);
        TelaEdicaoPokemon telaEdicao = new TelaEdicaoPokemon(this.tbPokemons, pokemon, numeroLinha);
        telaEdicao.setLocationRelativeTo(null);
        telaEdicao.setVisible(true);
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirGeralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirGeralActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) this.tbPokemons.getModel();
        int quantidadeLinhas = modelo.getRowCount();
        if(quantidadeLinhas <= 0){
            JOptionPane.showMessageDialog(this, "Não existem mais registros para excluir", 
                    "Erro ao Excluir", JOptionPane.ERROR_MESSAGE);
        }else{
            modelo.removeRow(quantidadeLinhas-1);
        }                
    }//GEN-LAST:event_btnExcluirGeralActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir?", 
                "Exclusão de Cadastro", JOptionPane.YES_NO_OPTION);
        
        if(resposta == 0){
            //primeiro pegue o id para excluir no banco de dados e somente depois
            //realize a atualizacao da tabela
            int numeroLinha = this.tbPokemons.getSelectedRow();  
            //object para string e depois pra int:
            int id = Integer.valueOf(this.tbPokemons.getValueAt(numeroLinha, 0).toString()); 
            //operacoes na tabale
            DefaultTableModel modelo = (DefaultTableModel) this.tbPokemons.getModel();
            modelo.removeRow(this.tbPokemons.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Registro de ID "+id+" excluído com sucesso!");
        }
            
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
                
        String nome = this.tfNome.getText();
        if(nome.isEmpty() || this.arquivoSelecionado == null){
            JOptionPane.showMessageDialog(null, "Nome e imagem são dados obrigatórios", "Novo Cadastro", JOptionPane.ERROR_MESSAGE);
        }else{
            
            String nomeArquivo = this.transferirArquivo();
            if(nomeArquivo != null){
                
                DefaultTableModel modelo = (DefaultTableModel) this.tbPokemons.getModel();
                int quantidadeLinhas = modelo.getRowCount(); 
                quantidadeLinhas++;//apenas para simular ultimo ID
        
                Pokemon novo = new Pokemon(quantidadeLinhas, nome, nomeArquivo);            
                String[] linha = {
                    String.valueOf(novo.getId()),
                    novo.getNome(),
                    novo.getImagem()
                };
                modelo.addRow(linha);                
                
                JOptionPane.showMessageDialog(null, 
                        "Cadastro realizado com sucesso", 
                        "Cadastro de Pokemon", 
                        JOptionPane.INFORMATION_MESSAGE);
                
            }else{
                JOptionPane.showMessageDialog(null, 
                        "Verifique o upload da imagem do pokemon, se selecionou a imagem e se o diretório destino existe", 
                        "Upload de Imagem", 
                        JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void tbPokemonsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPokemonsMouseClicked
        int numeroLinha = this.tbPokemons.getSelectedRow();
        String imagem = this.tbPokemons.getValueAt(numeroLinha, 2).toString();
        this.lbImagem.setIcon(new ImageIcon(getClass().getResource("/img/"+imagem)));
    }//GEN-LAST:event_tbPokemonsMouseClicked

    private void btnUploadImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImagemActionPerformed
        JFileChooser janelaUpload = new JFileChooser();
        janelaUpload.setDialogTitle("Escolha o arquivo");
        janelaUpload.setFileSelectionMode(JFileChooser.FILES_ONLY);
  
        int respostaUsuario = janelaUpload.showOpenDialog(this);
        if (respostaUsuario == JFileChooser.APPROVE_OPTION){ //usuario selecionou arquivo
            this.arquivoSelecionado = janelaUpload.getSelectedFile();
            BufferedImage buffer;
            try {
                //exibindo imagem no jlabel de pre-visualizacao
                buffer = ImageIO.read(this.arquivoSelecionado);
                this.lbPrevisualizar.setIcon(new ImageIcon(buffer));
                             
            } catch(IOException e) {
               //e.printStackTrace(); // todo: implement proper error handeling
                System.out.println("Algo aconteceu com a leitura do arquivo:");
            }
        }
    }//GEN-LAST:event_btnUploadImagemActionPerformed

    
    /**
     * Inicializa a jTable da tela com uma lista de objetos
     */
    private void listarPokemons(){
        //pegar o modelo de dados configurado
        DefaultTableModel modelo = (DefaultTableModel) this.tbPokemons.getModel(); 
        
        for(int i = 0; i < this.lista.size(); i++){
            String[] linha = {
                String.valueOf(this.lista.get(i).getId()),
                this.lista.get(i).getNome(),
                this.lista.get(i).getImagem()
            };
            modelo.addRow(linha);
        }
        
        this.tbPokemons.changeSelection(0, 0, false, false); //deixar selecionado linha 1
        //atualiza o jlabel com a imagem do primeiro registro:
        this.lbImagem.setIcon(new ImageIcon(getClass().getResource("/img/"+this.lista.get(0).getImagem()))); 
    }
    
    /**
     * Realiza a copia do arquivo de imagem de um local para o projeto.
     * Atente que o arquivo sera inserido nos resources do projeto, isto precisa ser alterado 
     * para uma pasta que estiver fora do projeto a fim de que os usuários do executavel consiga usar o programa
     * @return String contendo o nome do arquivo ou null caso nao conseguiu fazer a transferencia do arquivo
     */
    private String transferirArquivo(){
        
        String nomeArquivoFinal = null;
        
        if(this.arquivoSelecionado != null){
            
            //logica para saber a extensao do arquivo e normalizar o nome do mesmo
            String caminhoArquivoOriginal = this.arquivoSelecionado.getAbsolutePath();               
            String nomeOriginal = this.arquivoSelecionado.getName();
            int indiceExtensao = nomeOriginal.lastIndexOf(".");
            String extensao = nomeOriginal.substring(indiceExtensao);
            nomeArquivoFinal = this.tfNome.getText() + extensao;                   
            
            //logica para reconhecer local de destino e realizar a transferencia/copia do arquivo
            String diretorioProjeto = System.getProperty("user.dir"); //retorna o caminho absoluto de onde esta sendo executada a aplicacao
            String diretorioDestino = diretorioProjeto + "/src/main/resources/img/" + nomeArquivoFinal;
            Path origem = Paths.get(caminhoArquivoOriginal); 
            Path destino = Paths.get(diretorioDestino); 
            try {
                //realizando a transferencia do arquivo
                Files.copy(origem, destino, StandardCopyOption.REPLACE_EXISTING); //REPLACE_EXISTING substitui arquivo com mesmo nome
            } catch (IOException ex) {
                nomeArquivoFinal = null;
                //Logger.getLogger(TelaGlossario.class.getName()).log(Level.SEVERE, null, ex);                   
                System.out.println("Ocorreu algum problema no upload do arquivo: "+ex.getMessage());
            }
        }
        
        return nomeArquivoFinal;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnExcluirGeral;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnUploadImagem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbImagem;
    private javax.swing.JLabel lbNome;
    private javax.swing.JLabel lbPreview;
    private javax.swing.JLabel lbPreviewRotulo;
    private javax.swing.JLabel lbPrevisualizar;
    private javax.swing.JTable tbPokemons;
    private javax.swing.JTextField tfNome;
    // End of variables declaration//GEN-END:variables
}
